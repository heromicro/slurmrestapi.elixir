# NOTE: This file is auto generated by OpenAPI Generator 7.10.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule SlurmRESTAPI.Api.Slurmdb do
  @moduledoc """
  API calls for all endpoints tagged `Slurmdb`.
  """

  alias SlurmRESTAPI.Connection
  import SlurmRESTAPI.RequestBuilder

  @doc """
  Delete account

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `account_name` (String.t): Account name
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0040OpenapiAccountsRemovedResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0040_delete_account(Tesla.Env.client, String.t, keyword()) :: {:ok, SlurmRESTAPI.Model.V0040OpenapiAccountsRemovedResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0040_delete_account(connection, account_name, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/slurmdb/v0.0.40/account/#{account_name}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0040OpenapiAccountsRemovedResp},
      {:default, SlurmRESTAPI.Model.V0040OpenapiAccountsRemovedResp}
    ])
  end

  @doc """
  Delete association

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:account` (String.t): CSV accounts list
    - `:cluster` (String.t): CSV clusters list
    - `:default_qos` (String.t): CSV QOS list
    - `:format` (String.t): Ignored; process JSON manually to control output format
    - `:id` (String.t): CSV id list
    - `:only_defaults` (String.t): Filter to only defaults
    - `:parent_account` (String.t): CSV names of parent account
    - `:partition` (String.t): CSV partition name list
    - `:qos` (String.t): CSV QOS list
    - `:usage_end` (String.t): Usage end (UNIX timestamp)
    - `:usage_start` (String.t): Usage start (UNIX timestamp)
    - `:user` (String.t): CSV user list
    - `:with_usage` (String.t): Include usage
    - `:with_deleted` (String.t): Include deleted associations
    - `:with_raw_qos` (String.t): Include a raw qos or delta_qos
    - `:with_sub_accts` (String.t): Include sub acct information also
    - `:without_parent_info` (String.t): Exclude parent id/name
    - `:without_parent_limits` (String.t): Exclude limits from parents

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0040OpenapiAssocsRemovedResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0040_delete_association(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0040OpenapiAssocsRemovedResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0040_delete_association(connection, opts \\ []) do
    optional_params = %{
      :account => :query,
      :cluster => :query,
      :default_qos => :query,
      :format => :query,
      :id => :query,
      :only_defaults => :query,
      :parent_account => :query,
      :partition => :query,
      :qos => :query,
      :usage_end => :query,
      :usage_start => :query,
      :user => :query,
      :with_usage => :query,
      :with_deleted => :query,
      :with_raw_qos => :query,
      :with_sub_accts => :query,
      :without_parent_info => :query,
      :without_parent_limits => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/slurmdb/v0.0.40/association/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0040OpenapiAssocsRemovedResp},
      {:default, SlurmRESTAPI.Model.V0040OpenapiAssocsRemovedResp}
    ])
  end

  @doc """
  Delete associations

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:account` (String.t): CSV accounts list
    - `:cluster` (String.t): CSV clusters list
    - `:default_qos` (String.t): CSV QOS list
    - `:format` (String.t): Ignored; process JSON manually to control output format
    - `:id` (String.t): CSV id list
    - `:only_defaults` (String.t): Filter to only defaults
    - `:parent_account` (String.t): CSV names of parent account
    - `:partition` (String.t): CSV partition name list
    - `:qos` (String.t): CSV QOS list
    - `:usage_end` (String.t): Usage end (UNIX timestamp)
    - `:usage_start` (String.t): Usage start (UNIX timestamp)
    - `:user` (String.t): CSV user list
    - `:with_usage` (String.t): Include usage
    - `:with_deleted` (String.t): Include deleted associations
    - `:with_raw_qos` (String.t): Include a raw qos or delta_qos
    - `:with_sub_accts` (String.t): Include sub acct information also
    - `:without_parent_info` (String.t): Exclude parent id/name
    - `:without_parent_limits` (String.t): Exclude limits from parents

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0040OpenapiAssocsRemovedResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0040_delete_associations(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0040OpenapiAssocsRemovedResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0040_delete_associations(connection, opts \\ []) do
    optional_params = %{
      :account => :query,
      :cluster => :query,
      :default_qos => :query,
      :format => :query,
      :id => :query,
      :only_defaults => :query,
      :parent_account => :query,
      :partition => :query,
      :qos => :query,
      :usage_end => :query,
      :usage_start => :query,
      :user => :query,
      :with_usage => :query,
      :with_deleted => :query,
      :with_raw_qos => :query,
      :with_sub_accts => :query,
      :without_parent_info => :query,
      :without_parent_limits => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/slurmdb/v0.0.40/associations/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0040OpenapiAssocsRemovedResp},
      {:default, SlurmRESTAPI.Model.V0040OpenapiAssocsRemovedResp}
    ])
  end

  @doc """
  Delete cluster

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `cluster_name` (String.t): Cluster name
  - `opts` (keyword): Optional parameters
    - `:classification` (String.t): Type of machine
    - `:cluster` (String.t): CSV cluster list
    - `:federation` (String.t): CSV federation list
    - `:flags` (String.t): Query flags
    - `:format` (String.t): Ignored; process JSON manually to control output format
    - `:rpc_version` (String.t): CSV RPC version list
    - `:usage_end` (String.t): Usage end (UNIX timestamp)
    - `:usage_start` (String.t): Usage start (UNIX timestamp)
    - `:with_deleted` (String.t): Include deleted clusters
    - `:with_usage` (String.t): Include usage

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0040OpenapiClustersRemovedResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0040_delete_cluster(Tesla.Env.client, String.t, keyword()) :: {:ok, SlurmRESTAPI.Model.V0040OpenapiClustersRemovedResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0040_delete_cluster(connection, cluster_name, opts \\ []) do
    optional_params = %{
      :classification => :query,
      :cluster => :query,
      :federation => :query,
      :flags => :query,
      :format => :query,
      :rpc_version => :query,
      :usage_end => :query,
      :usage_start => :query,
      :with_deleted => :query,
      :with_usage => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/slurmdb/v0.0.40/cluster/#{cluster_name}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0040OpenapiClustersRemovedResp},
      {:default, SlurmRESTAPI.Model.V0040OpenapiClustersRemovedResp}
    ])
  end

  @doc """
  Delete QOS

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `qos` (String.t): QOS name
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0040OpenapiSlurmdbdQosRemovedResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0040_delete_single_qos(Tesla.Env.client, String.t, keyword()) :: {:ok, SlurmRESTAPI.Model.V0040OpenapiSlurmdbdQosRemovedResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0040_delete_single_qos(connection, qos, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/slurmdb/v0.0.40/qos/#{qos}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0040OpenapiSlurmdbdQosRemovedResp},
      {:default, SlurmRESTAPI.Model.V0040OpenapiSlurmdbdQosRemovedResp}
    ])
  end

  @doc """
  Delete user

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `name` (String.t): User name
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0040OpenapiResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0040_delete_user(Tesla.Env.client, String.t, keyword()) :: {:ok, SlurmRESTAPI.Model.V0040OpenapiResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0040_delete_user(connection, name, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/slurmdb/v0.0.40/user/#{name}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0040OpenapiResp},
      {:default, SlurmRESTAPI.Model.V0040OpenapiResp}
    ])
  end

  @doc """
  Delete wckey

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `id` (String.t): wckey id
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0040OpenapiWckeyRemovedResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0040_delete_wckey(Tesla.Env.client, String.t, keyword()) :: {:ok, SlurmRESTAPI.Model.V0040OpenapiWckeyRemovedResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0040_delete_wckey(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/slurmdb/v0.0.40/wckey/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0040OpenapiWckeyRemovedResp},
      {:default, SlurmRESTAPI.Model.V0040OpenapiWckeyRemovedResp}
    ])
  end

  @doc """
  Get account info

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `account_name` (String.t): Account name
  - `opts` (keyword): Optional parameters
    - `:with_assocs` (String.t): Include associations
    - `:with_coords` (String.t): Include coordinators
    - `:with_deleted` (String.t): Include deleted

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0040OpenapiAccountsResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0040_get_account(Tesla.Env.client, String.t, keyword()) :: {:ok, SlurmRESTAPI.Model.V0040OpenapiAccountsResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0040_get_account(connection, account_name, opts \\ []) do
    optional_params = %{
      :with_assocs => :query,
      :with_coords => :query,
      :with_deleted => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.40/account/#{account_name}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0040OpenapiAccountsResp},
      {:default, SlurmRESTAPI.Model.V0040OpenapiAccountsResp}
    ])
  end

  @doc """
  Get account list

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:description` (String.t): CSV description list
    - `:with_assocs` (String.t): Include associations
    - `:with_coords` (String.t): Include coordinators
    - `:with_deleted` (String.t): Include deleted accounts

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0040OpenapiAccountsResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0040_get_accounts(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0040OpenapiAccountsResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0040_get_accounts(connection, opts \\ []) do
    optional_params = %{
      :description => :query,
      :with_assocs => :query,
      :with_coords => :query,
      :with_deleted => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.40/accounts/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0040OpenapiAccountsResp},
      {:default, SlurmRESTAPI.Model.V0040OpenapiAccountsResp}
    ])
  end

  @doc """
  Get association info

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:account` (String.t): CSV accounts list
    - `:cluster` (String.t): CSV clusters list
    - `:default_qos` (String.t): CSV QOS list
    - `:format` (String.t): Ignored; process JSON manually to control output format
    - `:id` (String.t): CSV id list
    - `:only_defaults` (String.t): Filter to only defaults
    - `:parent_account` (String.t): CSV names of parent account
    - `:partition` (String.t): CSV partition name list
    - `:qos` (String.t): CSV QOS list
    - `:usage_end` (String.t): Usage end (UNIX timestamp)
    - `:usage_start` (String.t): Usage start (UNIX timestamp)
    - `:user` (String.t): CSV user list
    - `:with_usage` (String.t): Include usage
    - `:with_deleted` (String.t): Include deleted associations
    - `:with_raw_qos` (String.t): Include a raw qos or delta_qos
    - `:with_sub_accts` (String.t): Include sub acct information also
    - `:without_parent_info` (String.t): Exclude parent id/name
    - `:without_parent_limits` (String.t): Exclude limits from parents

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0040OpenapiAssocsResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0040_get_association(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0040OpenapiAssocsResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0040_get_association(connection, opts \\ []) do
    optional_params = %{
      :account => :query,
      :cluster => :query,
      :default_qos => :query,
      :format => :query,
      :id => :query,
      :only_defaults => :query,
      :parent_account => :query,
      :partition => :query,
      :qos => :query,
      :usage_end => :query,
      :usage_start => :query,
      :user => :query,
      :with_usage => :query,
      :with_deleted => :query,
      :with_raw_qos => :query,
      :with_sub_accts => :query,
      :without_parent_info => :query,
      :without_parent_limits => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.40/association/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0040OpenapiAssocsResp},
      {:default, SlurmRESTAPI.Model.V0040OpenapiAssocsResp}
    ])
  end

  @doc """
  Get association list

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:account` (String.t): CSV accounts list
    - `:cluster` (String.t): CSV clusters list
    - `:default_qos` (String.t): CSV QOS list
    - `:format` (String.t): Ignored; process JSON manually to control output format
    - `:id` (String.t): CSV id list
    - `:only_defaults` (String.t): Filter to only defaults
    - `:parent_account` (String.t): CSV names of parent account
    - `:partition` (String.t): CSV partition name list
    - `:qos` (String.t): CSV QOS list
    - `:usage_end` (String.t): Usage end (UNIX timestamp)
    - `:usage_start` (String.t): Usage start (UNIX timestamp)
    - `:user` (String.t): CSV user list
    - `:with_usage` (String.t): Include usage
    - `:with_deleted` (String.t): Include deleted associations
    - `:with_raw_qos` (String.t): Include a raw qos or delta_qos
    - `:with_sub_accts` (String.t): Include sub acct information also
    - `:without_parent_info` (String.t): Exclude parent id/name
    - `:without_parent_limits` (String.t): Exclude limits from parents

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0040OpenapiAssocsResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0040_get_associations(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0040OpenapiAssocsResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0040_get_associations(connection, opts \\ []) do
    optional_params = %{
      :account => :query,
      :cluster => :query,
      :default_qos => :query,
      :format => :query,
      :id => :query,
      :only_defaults => :query,
      :parent_account => :query,
      :partition => :query,
      :qos => :query,
      :usage_end => :query,
      :usage_start => :query,
      :user => :query,
      :with_usage => :query,
      :with_deleted => :query,
      :with_raw_qos => :query,
      :with_sub_accts => :query,
      :without_parent_info => :query,
      :without_parent_limits => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.40/associations/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0040OpenapiAssocsResp},
      {:default, SlurmRESTAPI.Model.V0040OpenapiAssocsResp}
    ])
  end

  @doc """
  Get cluster info

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `cluster_name` (String.t): Cluster name
  - `opts` (keyword): Optional parameters
    - `:classification` (String.t): Type of machine
    - `:cluster` (String.t): CSV cluster list
    - `:federation` (String.t): CSV federation list
    - `:flags` (String.t): Query flags
    - `:format` (String.t): Ignored; process JSON manually to control output format
    - `:rpc_version` (String.t): CSV RPC version list
    - `:usage_end` (String.t): Usage end (UNIX timestamp)
    - `:usage_start` (String.t): Usage start (UNIX timestamp)
    - `:with_deleted` (String.t): Include deleted clusters
    - `:with_usage` (String.t): Include usage

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0040OpenapiClustersResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0040_get_cluster(Tesla.Env.client, String.t, keyword()) :: {:ok, SlurmRESTAPI.Model.V0040OpenapiClustersResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0040_get_cluster(connection, cluster_name, opts \\ []) do
    optional_params = %{
      :classification => :query,
      :cluster => :query,
      :federation => :query,
      :flags => :query,
      :format => :query,
      :rpc_version => :query,
      :usage_end => :query,
      :usage_start => :query,
      :with_deleted => :query,
      :with_usage => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.40/cluster/#{cluster_name}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0040OpenapiClustersResp},
      {:default, SlurmRESTAPI.Model.V0040OpenapiClustersResp}
    ])
  end

  @doc """
  Get cluster list

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:update_time` (String.t): Filter reservations since update timestamp

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0040OpenapiClustersResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0040_get_clusters(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0040OpenapiClustersResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0040_get_clusters(connection, opts \\ []) do
    optional_params = %{
      :update_time => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.40/clusters/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0040OpenapiClustersResp},
      {:default, SlurmRESTAPI.Model.V0040OpenapiClustersResp}
    ])
  end

  @doc """
  Dump all configuration information

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0040OpenapiSlurmdbdConfigResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0040_get_config(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0040OpenapiSlurmdbdConfigResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0040_get_config(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.40/config")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0040OpenapiSlurmdbdConfigResp},
      {:default, SlurmRESTAPI.Model.V0040OpenapiSlurmdbdConfigResp}
    ])
  end

  @doc """
  Get slurmdb diagnostics

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0040OpenapiSlurmdbdStatsResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0040_get_diag(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0040OpenapiSlurmdbdStatsResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0040_get_diag(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.40/diag/")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0040OpenapiSlurmdbdStatsResp},
      {:default, SlurmRESTAPI.Model.V0040OpenapiSlurmdbdStatsResp}
    ])
  end

  @doc """
  Get instance info

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:cluster` (String.t): CSV clusters list
    - `:extra` (String.t): CSV extra list
    - `:format` (String.t): Ignored; process JSON manually to control output format
    - `:instance_id` (String.t): CSV instance_id list
    - `:instance_type` (String.t): CSV instance_type list
    - `:node_list` (String.t): Ranged node string
    - `:time_end` (String.t): Time end (UNIX timestamp)
    - `:time_start` (String.t): Time start (UNIX timestamp)

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0040OpenapiInstancesResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0040_get_instance(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0040OpenapiInstancesResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0040_get_instance(connection, opts \\ []) do
    optional_params = %{
      :cluster => :query,
      :extra => :query,
      :format => :query,
      :instance_id => :query,
      :instance_type => :query,
      :node_list => :query,
      :time_end => :query,
      :time_start => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.40/instance/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0040OpenapiInstancesResp},
      {:default, SlurmRESTAPI.Model.V0040OpenapiInstancesResp}
    ])
  end

  @doc """
  Get instance list

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:cluster` (String.t): CSV clusters list
    - `:extra` (String.t): CSV extra list
    - `:format` (String.t): Ignored; process JSON manually to control output format
    - `:instance_id` (String.t): CSV instance_id list
    - `:instance_type` (String.t): CSV instance_type list
    - `:node_list` (String.t): Ranged node string
    - `:time_end` (String.t): Time end (UNIX timestamp)
    - `:time_start` (String.t): Time start (UNIX timestamp)

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0040OpenapiInstancesResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0040_get_instances(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0040OpenapiInstancesResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0040_get_instances(connection, opts \\ []) do
    optional_params = %{
      :cluster => :query,
      :extra => :query,
      :format => :query,
      :instance_id => :query,
      :instance_type => :query,
      :node_list => :query,
      :time_end => :query,
      :time_start => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.40/instances/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0040OpenapiInstancesResp},
      {:default, SlurmRESTAPI.Model.V0040OpenapiInstancesResp}
    ])
  end

  @doc """
  Get job info
  This endpoint may return multiple job entries since job_id is not a unique key - only the tuple (cluster, job_id, start_time) is unique. If the requested job_id is a component of a heterogeneous job all components are returned.

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `job_id` (String.t): Job id
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0040OpenapiSlurmdbdJobsResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0040_get_job(Tesla.Env.client, String.t, keyword()) :: {:ok, SlurmRESTAPI.Model.V0040OpenapiSlurmdbdJobsResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0040_get_job(connection, job_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.40/job/#{job_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0040OpenapiSlurmdbdJobsResp},
      {:default, SlurmRESTAPI.Model.V0040OpenapiSlurmdbdJobsResp}
    ])
  end

  @doc """
  Get job list

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:account` (String.t): CSV account list
    - `:association` (String.t): CSV association list
    - `:cluster` (String.t): CSV cluster list
    - `:constraints` (String.t): CSV constraint list
    - `:cpus_max` (String.t): Maximum number of cpus
    - `:cpus_min` (String.t): Minimum number of cpus
    - `:scheduler_unset` (String.t): Schedule bits not set
    - `:scheduled_on_submit` (String.t): Job was started on submit
    - `:scheduled_by_main` (String.t): Job was started from main scheduler
    - `:scheduled_by_backfill` (String.t): Job was started from backfill
    - `:job_started` (String.t): Job start RPC was received
    - `:exit_code` (String.t): Job exit code (numeric)
    - `:show_duplicates` (String.t): Include duplicate job entries
    - `:skip_steps` (String.t): Exclude job step details
    - `:disable_truncate_usage_time` (String.t): Do not truncate the time to usage_start and usage_end
    - `:whole_hetjob` (String.t): Include details on all hetjob components
    - `:disable_whole_hetjob` (String.t): Only show details on specified hetjob components
    - `:disable_wait_for_result` (String.t): Tell dbd not to wait for the result
    - `:usage_time_as_submit_time` (String.t): Use usage_time as the submit_time of the job
    - `:show_batch_script` (String.t): Include job script
    - `:show_job_environment` (String.t): Include job environment
    - `:format` (String.t): Ignored; process JSON manually to control output format
    - `:groups` (String.t): CSV group list
    - `:job_name` (String.t): CSV job name list
    - `:nodes_max` (String.t): Maximum number of nodes
    - `:nodes_min` (String.t): Minimum number of nodes
    - `:partition` (String.t): CSV partition name list
    - `:qos` (String.t): CSV QOS name list
    - `:reason` (String.t): CSV reason list
    - `:reservation` (String.t): CSV reservation name list
    - `:reservation_id` (String.t): CSV reservation ID list
    - `:state` (String.t): CSV state list
    - `:step` (String.t): CSV step id list
    - `:timelimit_max` (String.t): Maximum timelimit (seconds)
    - `:timelimit_min` (String.t): Minimum timelimit (seconds)
    - `:end_time` (String.t): Usage end (UNIX timestamp)
    - `:start_time` (String.t): Usage start (UNIX timestamp)
    - `:submit_time` (String.t): Submit time (UNIX timestamp)
    - `:node` (String.t): Ranged node string where jobs ran
    - `:users` (String.t): CSV user name list
    - `:wckey` (String.t): CSV wckey list

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0040OpenapiSlurmdbdJobsResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0040_get_jobs(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0040OpenapiSlurmdbdJobsResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0040_get_jobs(connection, opts \\ []) do
    optional_params = %{
      :account => :query,
      :association => :query,
      :cluster => :query,
      :constraints => :query,
      :cpus_max => :query,
      :cpus_min => :query,
      :scheduler_unset => :query,
      :scheduled_on_submit => :query,
      :scheduled_by_main => :query,
      :scheduled_by_backfill => :query,
      :job_started => :query,
      :exit_code => :query,
      :show_duplicates => :query,
      :skip_steps => :query,
      :disable_truncate_usage_time => :query,
      :whole_hetjob => :query,
      :disable_whole_hetjob => :query,
      :disable_wait_for_result => :query,
      :usage_time_as_submit_time => :query,
      :show_batch_script => :query,
      :show_job_environment => :query,
      :format => :query,
      :groups => :query,
      :job_name => :query,
      :nodes_max => :query,
      :nodes_min => :query,
      :partition => :query,
      :qos => :query,
      :reason => :query,
      :reservation => :query,
      :reservation_id => :query,
      :state => :query,
      :step => :query,
      :timelimit_max => :query,
      :timelimit_min => :query,
      :end_time => :query,
      :start_time => :query,
      :submit_time => :query,
      :node => :query,
      :users => :query,
      :wckey => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.40/jobs/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0040OpenapiSlurmdbdJobsResp},
      {:default, SlurmRESTAPI.Model.V0040OpenapiSlurmdbdJobsResp}
    ])
  end

  @doc """
  Get QOS list

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:description` (String.t): CSV description list
    - `:id` (String.t): CSV QOS id list
    - `:format` (String.t): Ignored; process JSON manually to control output format
    - `:name` (String.t): CSV QOS name list
    - `:preempt_mode` (String.t): PreemptMode used when jobs in this QOS are preempted
    - `:with_deleted` (String.t): Include deleted QOS

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0040OpenapiSlurmdbdQosResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0040_get_qos(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0040OpenapiSlurmdbdQosResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0040_get_qos(connection, opts \\ []) do
    optional_params = %{
      :description => :query,
      :id => :query,
      :format => :query,
      :name => :query,
      :preempt_mode => :query,
      :with_deleted => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.40/qos/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0040OpenapiSlurmdbdQosResp},
      {:default, SlurmRESTAPI.Model.V0040OpenapiSlurmdbdQosResp}
    ])
  end

  @doc """
  Get QOS info

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `qos` (String.t): QOS name
  - `opts` (keyword): Optional parameters
    - `:with_deleted` (String.t): Query includes deleted QOS

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0040OpenapiSlurmdbdQosResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0040_get_single_qos(Tesla.Env.client, String.t, keyword()) :: {:ok, SlurmRESTAPI.Model.V0040OpenapiSlurmdbdQosResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0040_get_single_qos(connection, qos, opts \\ []) do
    optional_params = %{
      :with_deleted => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.40/qos/#{qos}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0040OpenapiSlurmdbdQosResp},
      {:default, SlurmRESTAPI.Model.V0040OpenapiSlurmdbdQosResp}
    ])
  end

  @doc """
  Get TRES info

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0040OpenapiTresResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0040_get_tres(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0040OpenapiTresResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0040_get_tres(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.40/tres/")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0040OpenapiTresResp},
      {:default, SlurmRESTAPI.Model.V0040OpenapiTresResp}
    ])
  end

  @doc """
  Get user info

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `name` (String.t): User name
  - `opts` (keyword): Optional parameters
    - `:with_deleted` (String.t): Include deleted users
    - `:with_assocs` (String.t): Include associations
    - `:with_coords` (String.t): Include coordinators
    - `:with_wckeys` (String.t): Include wckeys

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0040OpenapiUsersResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0040_get_user(Tesla.Env.client, String.t, keyword()) :: {:ok, SlurmRESTAPI.Model.V0040OpenapiUsersResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0040_get_user(connection, name, opts \\ []) do
    optional_params = %{
      :with_deleted => :query,
      :with_assocs => :query,
      :with_coords => :query,
      :with_wckeys => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.40/user/#{name}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0040OpenapiUsersResp},
      {:default, SlurmRESTAPI.Model.V0040OpenapiUsersResp}
    ])
  end

  @doc """
  Get user list

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:admin_level` (String.t): Administrator level
    - `:default_account` (String.t): CSV default account list
    - `:default_wckey` (String.t): CSV default wckey list
    - `:with_assocs` (String.t): With associations
    - `:with_coords` (String.t): With coordinators
    - `:with_deleted` (String.t): With deleted
    - `:with_wckeys` (String.t): With wckeys
    - `:without_defaults` (String.t): Exclude defaults

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0040OpenapiUsersResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0040_get_users(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0040OpenapiUsersResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0040_get_users(connection, opts \\ []) do
    optional_params = %{
      :admin_level => :query,
      :default_account => :query,
      :default_wckey => :query,
      :with_assocs => :query,
      :with_coords => :query,
      :with_deleted => :query,
      :with_wckeys => :query,
      :without_defaults => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.40/users/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0040OpenapiUsersResp},
      {:default, SlurmRESTAPI.Model.V0040OpenapiUsersResp}
    ])
  end

  @doc """
  Get wckey info

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `id` (String.t): wckey id
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0040OpenapiWckeyResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0040_get_wckey(Tesla.Env.client, String.t, keyword()) :: {:ok, SlurmRESTAPI.Model.V0040OpenapiWckeyResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0040_get_wckey(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.40/wckey/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0040OpenapiWckeyResp},
      {:default, SlurmRESTAPI.Model.V0040OpenapiWckeyResp}
    ])
  end

  @doc """
  Get wckey list

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:cluster` (String.t): CSV cluster name list
    - `:format` (String.t): Ignored; process JSON manually to control output format
    - `:id` (String.t): CSV id list
    - `:name` (String.t): CSV name list
    - `:only_defaults` (String.t): Only query defaults
    - `:usage_end` (String.t): Usage end (UNIX timestamp)
    - `:usage_start` (String.t): Usage start (UNIX timestamp)
    - `:user` (String.t): CSV user list
    - `:with_usage` (String.t): Include usage
    - `:with_deleted` (String.t): Include deleted wckeys

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0040OpenapiWckeyResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0040_get_wckeys(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0040OpenapiWckeyResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0040_get_wckeys(connection, opts \\ []) do
    optional_params = %{
      :cluster => :query,
      :format => :query,
      :id => :query,
      :name => :query,
      :only_defaults => :query,
      :usage_end => :query,
      :usage_start => :query,
      :user => :query,
      :with_usage => :query,
      :with_deleted => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.40/wckeys/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0040OpenapiWckeyResp},
      {:default, SlurmRESTAPI.Model.V0040OpenapiWckeyResp}
    ])
  end

  @doc """
  Add/update list of accounts

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` (V0040OpenapiAccountsResp): Description of accounts to update/create

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0040OpenapiResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0040_post_accounts(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0040OpenapiResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0040_post_accounts(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/slurmdb/v0.0.40/accounts/")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0040OpenapiResp},
      {:default, SlurmRESTAPI.Model.V0040OpenapiResp}
    ])
  end

  @doc """
  Add accounts with conditional association

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` (V0040OpenapiAccountsAddCondResp): Add list of accounts with conditional association

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0040OpenapiAccountsAddCondRespStr.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0040_post_accounts_association(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0040OpenapiAccountsAddCondRespStr.t} | {:error, Tesla.Env.t}
  def slurmdb_v0040_post_accounts_association(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/slurmdb/v0.0.40/accounts_association/")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0040OpenapiAccountsAddCondRespStr},
      {:default, SlurmRESTAPI.Model.V0040OpenapiAccountsAddCondRespStr}
    ])
  end

  @doc """
  Set associations info

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` (V0040OpenapiAssocsResp): Job description

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0040OpenapiResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0040_post_associations(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0040OpenapiResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0040_post_associations(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/slurmdb/v0.0.40/associations/")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0040OpenapiResp},
      {:default, SlurmRESTAPI.Model.V0040OpenapiResp}
    ])
  end

  @doc """
  Get cluster list

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:update_time` (String.t): Filter reservations since update timestamp
    - `:body` (V0040OpenapiClustersResp): Cluster add or update descriptions

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0040OpenapiResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0040_post_clusters(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0040OpenapiResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0040_post_clusters(connection, opts \\ []) do
    optional_params = %{
      :update_time => :query,
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/slurmdb/v0.0.40/clusters/")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0040OpenapiResp},
      {:default, SlurmRESTAPI.Model.V0040OpenapiResp}
    ])
  end

  @doc """
  Load all configuration information

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` (V0040OpenapiSlurmdbdConfigResp): Add or update config

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0040OpenapiResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0040_post_config(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0040OpenapiResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0040_post_config(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/slurmdb/v0.0.40/config")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0040OpenapiResp},
      {:default, SlurmRESTAPI.Model.V0040OpenapiResp}
    ])
  end

  @doc """
  Add or update QOSs

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:description` (String.t): CSV description list
    - `:id` (String.t): CSV QOS id list
    - `:format` (String.t): Ignored; process JSON manually to control output format
    - `:name` (String.t): CSV QOS name list
    - `:preempt_mode` (String.t): PreemptMode used when jobs in this QOS are preempted
    - `:with_deleted` (String.t): Include deleted QOS
    - `:body` (V0040OpenapiSlurmdbdQosResp): Description of QOS to add or update

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0040OpenapiResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0040_post_qos(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0040OpenapiResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0040_post_qos(connection, opts \\ []) do
    optional_params = %{
      :description => :query,
      :id => :query,
      :format => :query,
      :name => :query,
      :preempt_mode => :query,
      :with_deleted => :query,
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/slurmdb/v0.0.40/qos/")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0040OpenapiResp},
      {:default, SlurmRESTAPI.Model.V0040OpenapiResp}
    ])
  end

  @doc """
  Add TRES

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` (V0040OpenapiTresResp): TRES descriptions. Only works in developer mode.

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0040OpenapiResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0040_post_tres(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0040OpenapiResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0040_post_tres(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/slurmdb/v0.0.40/tres/")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0040OpenapiResp},
      {:default, SlurmRESTAPI.Model.V0040OpenapiResp}
    ])
  end

  @doc """
  Update users

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` (V0040OpenapiUsersResp): add or update user

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0040OpenapiResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0040_post_users(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0040OpenapiResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0040_post_users(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/slurmdb/v0.0.40/users/")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0040OpenapiResp},
      {:default, SlurmRESTAPI.Model.V0040OpenapiResp}
    ])
  end

  @doc """
  Add users with conditional association

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:update_time` (String.t): Filter partitions since update timestamp
    - `:flags` (String.t): Query flags
    - `:body` (V0040OpenapiUsersAddCondResp): Create users with conditional association

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0040OpenapiUsersAddCondRespStr.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0040_post_users_association(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0040OpenapiUsersAddCondRespStr.t} | {:error, Tesla.Env.t}
  def slurmdb_v0040_post_users_association(connection, opts \\ []) do
    optional_params = %{
      :update_time => :query,
      :flags => :query,
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/slurmdb/v0.0.40/users_association/")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0040OpenapiUsersAddCondRespStr},
      {:default, SlurmRESTAPI.Model.V0040OpenapiUsersAddCondRespStr}
    ])
  end

  @doc """
  Add or update wckeys

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:cluster` (String.t): CSV cluster name list
    - `:format` (String.t): Ignored; process JSON manually to control output format
    - `:id` (String.t): CSV id list
    - `:name` (String.t): CSV name list
    - `:only_defaults` (String.t): Only query defaults
    - `:usage_end` (String.t): Usage end (UNIX timestamp)
    - `:usage_start` (String.t): Usage start (UNIX timestamp)
    - `:user` (String.t): CSV user list
    - `:with_usage` (String.t): Include usage
    - `:with_deleted` (String.t): Include deleted wckeys
    - `:body` (V0040OpenapiWckeyResp): wckeys description

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0040OpenapiResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0040_post_wckeys(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0040OpenapiResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0040_post_wckeys(connection, opts \\ []) do
    optional_params = %{
      :cluster => :query,
      :format => :query,
      :id => :query,
      :name => :query,
      :only_defaults => :query,
      :usage_end => :query,
      :usage_start => :query,
      :user => :query,
      :with_usage => :query,
      :with_deleted => :query,
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/slurmdb/v0.0.40/wckeys/")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0040OpenapiResp},
      {:default, SlurmRESTAPI.Model.V0040OpenapiResp}
    ])
  end

  @doc """
  Delete account

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `account_name` (String.t): Account name
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0041OpenapiAccountsRemovedResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0041_delete_account(Tesla.Env.client, String.t, keyword()) :: {:ok, SlurmRESTAPI.Model.V0041OpenapiAccountsRemovedResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0041_delete_account(connection, account_name, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/slurmdb/v0.0.41/account/#{account_name}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0041OpenapiAccountsRemovedResp},
      {:default, SlurmRESTAPI.Model.V0041OpenapiAccountsRemovedResp}
    ])
  end

  @doc """
  Delete association

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:account` (String.t): CSV accounts list
    - `:cluster` (String.t): CSV clusters list
    - `:default_qos` (String.t): CSV QOS list
    - `:format` (String.t): Ignored; process JSON manually to control output format
    - `:id` (String.t): CSV id list
    - `:only_defaults` (String.t): Filter to only defaults
    - `:parent_account` (String.t): CSV names of parent account
    - `:partition` (String.t): CSV partition name list
    - `:qos` (String.t): CSV QOS list
    - `:usage_end` (String.t): Usage end (UNIX timestamp)
    - `:usage_start` (String.t): Usage start (UNIX timestamp)
    - `:user` (String.t): CSV user list
    - `:with_usage` (String.t): Include usage
    - `:with_deleted` (String.t): Include deleted associations
    - `:with_raw_qos` (String.t): Include a raw qos or delta_qos
    - `:with_sub_accts` (String.t): Include sub acct information
    - `:without_parent_info` (String.t): Exclude parent id/name
    - `:without_parent_limits` (String.t): Exclude limits from parents

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0041OpenapiAssocsRemovedResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0041_delete_association(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0041OpenapiAssocsRemovedResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0041_delete_association(connection, opts \\ []) do
    optional_params = %{
      :account => :query,
      :cluster => :query,
      :default_qos => :query,
      :format => :query,
      :id => :query,
      :only_defaults => :query,
      :parent_account => :query,
      :partition => :query,
      :qos => :query,
      :usage_end => :query,
      :usage_start => :query,
      :user => :query,
      :with_usage => :query,
      :with_deleted => :query,
      :with_raw_qos => :query,
      :with_sub_accts => :query,
      :without_parent_info => :query,
      :without_parent_limits => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/slurmdb/v0.0.41/association/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0041OpenapiAssocsRemovedResp},
      {:default, SlurmRESTAPI.Model.V0041OpenapiAssocsRemovedResp}
    ])
  end

  @doc """
  Delete associations

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:account` (String.t): CSV accounts list
    - `:cluster` (String.t): CSV clusters list
    - `:default_qos` (String.t): CSV QOS list
    - `:format` (String.t): Ignored; process JSON manually to control output format
    - `:id` (String.t): CSV id list
    - `:only_defaults` (String.t): Filter to only defaults
    - `:parent_account` (String.t): CSV names of parent account
    - `:partition` (String.t): CSV partition name list
    - `:qos` (String.t): CSV QOS list
    - `:usage_end` (String.t): Usage end (UNIX timestamp)
    - `:usage_start` (String.t): Usage start (UNIX timestamp)
    - `:user` (String.t): CSV user list
    - `:with_usage` (String.t): Include usage
    - `:with_deleted` (String.t): Include deleted associations
    - `:with_raw_qos` (String.t): Include a raw qos or delta_qos
    - `:with_sub_accts` (String.t): Include sub acct information
    - `:without_parent_info` (String.t): Exclude parent id/name
    - `:without_parent_limits` (String.t): Exclude limits from parents

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0041OpenapiAssocsRemovedResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0041_delete_associations(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0041OpenapiAssocsRemovedResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0041_delete_associations(connection, opts \\ []) do
    optional_params = %{
      :account => :query,
      :cluster => :query,
      :default_qos => :query,
      :format => :query,
      :id => :query,
      :only_defaults => :query,
      :parent_account => :query,
      :partition => :query,
      :qos => :query,
      :usage_end => :query,
      :usage_start => :query,
      :user => :query,
      :with_usage => :query,
      :with_deleted => :query,
      :with_raw_qos => :query,
      :with_sub_accts => :query,
      :without_parent_info => :query,
      :without_parent_limits => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/slurmdb/v0.0.41/associations/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0041OpenapiAssocsRemovedResp},
      {:default, SlurmRESTAPI.Model.V0041OpenapiAssocsRemovedResp}
    ])
  end

  @doc """
  Delete cluster

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `cluster_name` (String.t): Cluster name
  - `opts` (keyword): Optional parameters
    - `:classification` (String.t): Type of machine
    - `:cluster` (String.t): CSV cluster list
    - `:federation` (String.t): CSV federation list
    - `:flags` (String.t): Query flags
    - `:format` (String.t): Ignored; process JSON manually to control output format
    - `:rpc_version` (String.t): CSV RPC version list
    - `:usage_end` (String.t): Usage end (UNIX timestamp)
    - `:usage_start` (String.t): Usage start (UNIX timestamp)
    - `:with_deleted` (String.t): Include deleted clusters
    - `:with_usage` (String.t): Include usage

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0041OpenapiClustersRemovedResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0041_delete_cluster(Tesla.Env.client, String.t, keyword()) :: {:ok, SlurmRESTAPI.Model.V0041OpenapiClustersRemovedResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0041_delete_cluster(connection, cluster_name, opts \\ []) do
    optional_params = %{
      :classification => :query,
      :cluster => :query,
      :federation => :query,
      :flags => :query,
      :format => :query,
      :rpc_version => :query,
      :usage_end => :query,
      :usage_start => :query,
      :with_deleted => :query,
      :with_usage => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/slurmdb/v0.0.41/cluster/#{cluster_name}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0041OpenapiClustersRemovedResp},
      {:default, SlurmRESTAPI.Model.V0041OpenapiClustersRemovedResp}
    ])
  end

  @doc """
  Delete QOS

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `qos` (String.t): QOS name
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0041OpenapiSlurmdbdQosRemovedResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0041_delete_single_qos(Tesla.Env.client, String.t, keyword()) :: {:ok, SlurmRESTAPI.Model.V0041OpenapiSlurmdbdQosRemovedResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0041_delete_single_qos(connection, qos, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/slurmdb/v0.0.41/qos/#{qos}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0041OpenapiSlurmdbdQosRemovedResp},
      {:default, SlurmRESTAPI.Model.V0041OpenapiSlurmdbdQosRemovedResp}
    ])
  end

  @doc """
  Delete user

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `name` (String.t): User name
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0041OpenapiResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0041_delete_user(Tesla.Env.client, String.t, keyword()) :: {:ok, SlurmRESTAPI.Model.V0041OpenapiResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0041_delete_user(connection, name, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/slurmdb/v0.0.41/user/#{name}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0041OpenapiResp},
      {:default, SlurmRESTAPI.Model.V0041OpenapiResp}
    ])
  end

  @doc """
  Delete wckey

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `id` (String.t): wckey id
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0041OpenapiWckeyRemovedResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0041_delete_wckey(Tesla.Env.client, String.t, keyword()) :: {:ok, SlurmRESTAPI.Model.V0041OpenapiWckeyRemovedResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0041_delete_wckey(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/slurmdb/v0.0.41/wckey/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0041OpenapiWckeyRemovedResp},
      {:default, SlurmRESTAPI.Model.V0041OpenapiWckeyRemovedResp}
    ])
  end

  @doc """
  Get account info

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `account_name` (String.t): Account name
  - `opts` (keyword): Optional parameters
    - `:with_assocs` (String.t): Include associations
    - `:with_coords` (String.t): Include coordinators
    - `:with_deleted` (String.t): Include deleted

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0041OpenapiAccountsResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0041_get_account(Tesla.Env.client, String.t, keyword()) :: {:ok, SlurmRESTAPI.Model.V0041OpenapiAccountsResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0041_get_account(connection, account_name, opts \\ []) do
    optional_params = %{
      :with_assocs => :query,
      :with_coords => :query,
      :with_deleted => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.41/account/#{account_name}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0041OpenapiAccountsResp},
      {:default, SlurmRESTAPI.Model.V0041OpenapiAccountsResp}
    ])
  end

  @doc """
  Get account list

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:description` (String.t): CSV description list
    - `:DELETED` (String.t): include deleted associations
    - `:WithAssociations` (String.t): query includes associations
    - `:WithCoordinators` (String.t): query includes coordinators
    - `:NoUsersAreCoords` (String.t): remove users as coordinators
    - `:UsersAreCoords` (String.t): users are coordinators

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0041OpenapiAccountsResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0041_get_accounts(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0041OpenapiAccountsResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0041_get_accounts(connection, opts \\ []) do
    optional_params = %{
      :description => :query,
      :DELETED => :query,
      :WithAssociations => :query,
      :WithCoordinators => :query,
      :NoUsersAreCoords => :query,
      :UsersAreCoords => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.41/accounts/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0041OpenapiAccountsResp},
      {:default, SlurmRESTAPI.Model.V0041OpenapiAccountsResp}
    ])
  end

  @doc """
  Get association info

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:account` (String.t): CSV accounts list
    - `:cluster` (String.t): CSV clusters list
    - `:default_qos` (String.t): CSV QOS list
    - `:format` (String.t): Ignored; process JSON manually to control output format
    - `:id` (String.t): CSV id list
    - `:only_defaults` (String.t): Filter to only defaults
    - `:parent_account` (String.t): CSV names of parent account
    - `:partition` (String.t): CSV partition name list
    - `:qos` (String.t): CSV QOS list
    - `:usage_end` (String.t): Usage end (UNIX timestamp)
    - `:usage_start` (String.t): Usage start (UNIX timestamp)
    - `:user` (String.t): CSV user list
    - `:with_usage` (String.t): Include usage
    - `:with_deleted` (String.t): Include deleted associations
    - `:with_raw_qos` (String.t): Include a raw qos or delta_qos
    - `:with_sub_accts` (String.t): Include sub acct information
    - `:without_parent_info` (String.t): Exclude parent id/name
    - `:without_parent_limits` (String.t): Exclude limits from parents

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0041OpenapiAssocsResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0041_get_association(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0041OpenapiAssocsResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0041_get_association(connection, opts \\ []) do
    optional_params = %{
      :account => :query,
      :cluster => :query,
      :default_qos => :query,
      :format => :query,
      :id => :query,
      :only_defaults => :query,
      :parent_account => :query,
      :partition => :query,
      :qos => :query,
      :usage_end => :query,
      :usage_start => :query,
      :user => :query,
      :with_usage => :query,
      :with_deleted => :query,
      :with_raw_qos => :query,
      :with_sub_accts => :query,
      :without_parent_info => :query,
      :without_parent_limits => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.41/association/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0041OpenapiAssocsResp},
      {:default, SlurmRESTAPI.Model.V0041OpenapiAssocsResp}
    ])
  end

  @doc """
  Get association list

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:account` (String.t): CSV accounts list
    - `:cluster` (String.t): CSV clusters list
    - `:default_qos` (String.t): CSV QOS list
    - `:format` (String.t): Ignored; process JSON manually to control output format
    - `:id` (String.t): CSV id list
    - `:only_defaults` (String.t): Filter to only defaults
    - `:parent_account` (String.t): CSV names of parent account
    - `:partition` (String.t): CSV partition name list
    - `:qos` (String.t): CSV QOS list
    - `:usage_end` (String.t): Usage end (UNIX timestamp)
    - `:usage_start` (String.t): Usage start (UNIX timestamp)
    - `:user` (String.t): CSV user list
    - `:with_usage` (String.t): Include usage
    - `:with_deleted` (String.t): Include deleted associations
    - `:with_raw_qos` (String.t): Include a raw qos or delta_qos
    - `:with_sub_accts` (String.t): Include sub acct information
    - `:without_parent_info` (String.t): Exclude parent id/name
    - `:without_parent_limits` (String.t): Exclude limits from parents

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0041OpenapiAssocsResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0041_get_associations(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0041OpenapiAssocsResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0041_get_associations(connection, opts \\ []) do
    optional_params = %{
      :account => :query,
      :cluster => :query,
      :default_qos => :query,
      :format => :query,
      :id => :query,
      :only_defaults => :query,
      :parent_account => :query,
      :partition => :query,
      :qos => :query,
      :usage_end => :query,
      :usage_start => :query,
      :user => :query,
      :with_usage => :query,
      :with_deleted => :query,
      :with_raw_qos => :query,
      :with_sub_accts => :query,
      :without_parent_info => :query,
      :without_parent_limits => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.41/associations/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0041OpenapiAssocsResp},
      {:default, SlurmRESTAPI.Model.V0041OpenapiAssocsResp}
    ])
  end

  @doc """
  Get cluster info

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `cluster_name` (String.t): Cluster name
  - `opts` (keyword): Optional parameters
    - `:classification` (String.t): Type of machine
    - `:cluster` (String.t): CSV cluster list
    - `:federation` (String.t): CSV federation list
    - `:flags` (String.t): Query flags
    - `:format` (String.t): Ignored; process JSON manually to control output format
    - `:rpc_version` (String.t): CSV RPC version list
    - `:usage_end` (String.t): Usage end (UNIX timestamp)
    - `:usage_start` (String.t): Usage start (UNIX timestamp)
    - `:with_deleted` (String.t): Include deleted clusters
    - `:with_usage` (String.t): Include usage

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0041OpenapiClustersResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0041_get_cluster(Tesla.Env.client, String.t, keyword()) :: {:ok, SlurmRESTAPI.Model.V0041OpenapiClustersResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0041_get_cluster(connection, cluster_name, opts \\ []) do
    optional_params = %{
      :classification => :query,
      :cluster => :query,
      :federation => :query,
      :flags => :query,
      :format => :query,
      :rpc_version => :query,
      :usage_end => :query,
      :usage_start => :query,
      :with_deleted => :query,
      :with_usage => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.41/cluster/#{cluster_name}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0041OpenapiClustersResp},
      {:default, SlurmRESTAPI.Model.V0041OpenapiClustersResp}
    ])
  end

  @doc """
  Get cluster list

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:update_time` (String.t): Filter reservations since update timestamp

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0041OpenapiClustersResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0041_get_clusters(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0041OpenapiClustersResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0041_get_clusters(connection, opts \\ []) do
    optional_params = %{
      :update_time => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.41/clusters/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0041OpenapiClustersResp},
      {:default, SlurmRESTAPI.Model.V0041OpenapiClustersResp}
    ])
  end

  @doc """
  Dump all configuration information

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0041OpenapiSlurmdbdConfigResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0041_get_config(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0041OpenapiSlurmdbdConfigResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0041_get_config(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.41/config")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0041OpenapiSlurmdbdConfigResp},
      {:default, SlurmRESTAPI.Model.V0041OpenapiSlurmdbdConfigResp}
    ])
  end

  @doc """
  Get slurmdb diagnostics

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0041OpenapiSlurmdbdStatsResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0041_get_diag(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0041OpenapiSlurmdbdStatsResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0041_get_diag(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.41/diag/")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0041OpenapiSlurmdbdStatsResp},
      {:default, SlurmRESTAPI.Model.V0041OpenapiSlurmdbdStatsResp}
    ])
  end

  @doc """
  Get instance info

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:cluster` (String.t): CSV clusters list
    - `:extra` (String.t): CSV extra list
    - `:format` (String.t): Ignored; process JSON manually to control output format
    - `:instance_id` (String.t): CSV instance_id list
    - `:instance_type` (String.t): CSV instance_type list
    - `:node_list` (String.t): Ranged node string
    - `:time_end` (String.t): Time end (UNIX timestamp)
    - `:time_start` (String.t): Time start (UNIX timestamp)

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0041OpenapiInstancesResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0041_get_instance(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0041OpenapiInstancesResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0041_get_instance(connection, opts \\ []) do
    optional_params = %{
      :cluster => :query,
      :extra => :query,
      :format => :query,
      :instance_id => :query,
      :instance_type => :query,
      :node_list => :query,
      :time_end => :query,
      :time_start => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.41/instance/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0041OpenapiInstancesResp},
      {:default, SlurmRESTAPI.Model.V0041OpenapiInstancesResp}
    ])
  end

  @doc """
  Get instance list

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:cluster` (String.t): CSV clusters list
    - `:extra` (String.t): CSV extra list
    - `:format` (String.t): Ignored; process JSON manually to control output format
    - `:instance_id` (String.t): CSV instance_id list
    - `:instance_type` (String.t): CSV instance_type list
    - `:node_list` (String.t): Ranged node string
    - `:time_end` (String.t): Time end (UNIX timestamp)
    - `:time_start` (String.t): Time start (UNIX timestamp)

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0041OpenapiInstancesResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0041_get_instances(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0041OpenapiInstancesResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0041_get_instances(connection, opts \\ []) do
    optional_params = %{
      :cluster => :query,
      :extra => :query,
      :format => :query,
      :instance_id => :query,
      :instance_type => :query,
      :node_list => :query,
      :time_end => :query,
      :time_start => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.41/instances/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0041OpenapiInstancesResp},
      {:default, SlurmRESTAPI.Model.V0041OpenapiInstancesResp}
    ])
  end

  @doc """
  Get job info
  This endpoint may return multiple job entries since job_id is not a unique key - only the tuple (cluster, job_id, start_time) is unique. If the requested job_id is a component of a heterogeneous job all components are returned.

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `job_id` (String.t): Job id
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0041OpenapiSlurmdbdJobsResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0041_get_job(Tesla.Env.client, String.t, keyword()) :: {:ok, SlurmRESTAPI.Model.V0041OpenapiSlurmdbdJobsResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0041_get_job(connection, job_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.41/job/#{job_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0041OpenapiSlurmdbdJobsResp},
      {:default, SlurmRESTAPI.Model.V0041OpenapiSlurmdbdJobsResp}
    ])
  end

  @doc """
  Get job list

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:account` (String.t): CSV account list
    - `:association` (String.t): CSV association list
    - `:cluster` (String.t): CSV cluster list
    - `:constraints` (String.t): CSV constraint list
    - `:scheduler_unset` (String.t): Schedule bits not set
    - `:scheduled_on_submit` (String.t): Job was started on submit
    - `:scheduled_by_main` (String.t): Job was started from main scheduler
    - `:scheduled_by_backfill` (String.t): Job was started from backfill
    - `:job_started` (String.t): Job start RPC was received
    - `:exit_code` (String.t): Job exit code (numeric)
    - `:show_duplicates` (String.t): Include duplicate job entries
    - `:skip_steps` (String.t): Exclude job step details
    - `:disable_truncate_usage_time` (String.t): Do not truncate the time to usage_start and usage_end
    - `:whole_hetjob` (String.t): Include details on all hetjob components
    - `:disable_whole_hetjob` (String.t): Only show details on specified hetjob components
    - `:disable_wait_for_result` (String.t): Tell dbd not to wait for the result
    - `:usage_time_as_submit_time` (String.t): Use usage_time as the submit_time of the job
    - `:show_batch_script` (String.t): Include job script
    - `:show_job_environment` (String.t): Include job environment
    - `:format` (String.t): Ignored; process JSON manually to control output format
    - `:groups` (String.t): CSV group list
    - `:job_name` (String.t): CSV job name list
    - `:partition` (String.t): CSV partition name list
    - `:qos` (String.t): CSV QOS name list
    - `:reason` (String.t): CSV reason list
    - `:reservation` (String.t): CSV reservation name list
    - `:reservation_id` (String.t): CSV reservation ID list
    - `:state` (String.t): CSV state list
    - `:step` (String.t): CSV step id list
    - `:end_time` (String.t): Usage end (UNIX timestamp)
    - `:start_time` (String.t): Usage start (UNIX timestamp)
    - `:node` (String.t): Ranged node string where jobs ran
    - `:users` (String.t): CSV user name list
    - `:wckey` (String.t): CSV wckey list

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0041OpenapiSlurmdbdJobsResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0041_get_jobs(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0041OpenapiSlurmdbdJobsResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0041_get_jobs(connection, opts \\ []) do
    optional_params = %{
      :account => :query,
      :association => :query,
      :cluster => :query,
      :constraints => :query,
      :scheduler_unset => :query,
      :scheduled_on_submit => :query,
      :scheduled_by_main => :query,
      :scheduled_by_backfill => :query,
      :job_started => :query,
      :exit_code => :query,
      :show_duplicates => :query,
      :skip_steps => :query,
      :disable_truncate_usage_time => :query,
      :whole_hetjob => :query,
      :disable_whole_hetjob => :query,
      :disable_wait_for_result => :query,
      :usage_time_as_submit_time => :query,
      :show_batch_script => :query,
      :show_job_environment => :query,
      :format => :query,
      :groups => :query,
      :job_name => :query,
      :partition => :query,
      :qos => :query,
      :reason => :query,
      :reservation => :query,
      :reservation_id => :query,
      :state => :query,
      :step => :query,
      :end_time => :query,
      :start_time => :query,
      :node => :query,
      :users => :query,
      :wckey => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.41/jobs/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0041OpenapiSlurmdbdJobsResp},
      {:default, SlurmRESTAPI.Model.V0041OpenapiSlurmdbdJobsResp}
    ])
  end

  @doc """
  Get QOS list

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:description` (String.t): CSV description list
    - `:id` (String.t): CSV QOS id list
    - `:format` (String.t): Ignored; process JSON manually to control output format
    - `:name` (String.t): CSV QOS name list
    - `:preempt_mode` (String.t): PreemptMode used when jobs in this QOS are preempted
    - `:with_deleted` (String.t): Include deleted QOS

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0041OpenapiSlurmdbdQosResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0041_get_qos(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0041OpenapiSlurmdbdQosResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0041_get_qos(connection, opts \\ []) do
    optional_params = %{
      :description => :query,
      :id => :query,
      :format => :query,
      :name => :query,
      :preempt_mode => :query,
      :with_deleted => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.41/qos/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0041OpenapiSlurmdbdQosResp},
      {:default, SlurmRESTAPI.Model.V0041OpenapiSlurmdbdQosResp}
    ])
  end

  @doc """
  Get QOS info

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `qos` (String.t): QOS name
  - `opts` (keyword): Optional parameters
    - `:with_deleted` (String.t): Query includes deleted QOS

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0041OpenapiSlurmdbdQosResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0041_get_single_qos(Tesla.Env.client, String.t, keyword()) :: {:ok, SlurmRESTAPI.Model.V0041OpenapiSlurmdbdQosResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0041_get_single_qos(connection, qos, opts \\ []) do
    optional_params = %{
      :with_deleted => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.41/qos/#{qos}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0041OpenapiSlurmdbdQosResp},
      {:default, SlurmRESTAPI.Model.V0041OpenapiSlurmdbdQosResp}
    ])
  end

  @doc """
  Get TRES info

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0041OpenapiTresResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0041_get_tres(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0041OpenapiTresResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0041_get_tres(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.41/tres/")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0041OpenapiTresResp},
      {:default, SlurmRESTAPI.Model.V0041OpenapiTresResp}
    ])
  end

  @doc """
  Get user info

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `name` (String.t): User name
  - `opts` (keyword): Optional parameters
    - `:with_deleted` (String.t): Include deleted users
    - `:with_assocs` (String.t): Include associations
    - `:with_coords` (String.t): Include coordinators
    - `:with_wckeys` (String.t): Include wckeys

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0041OpenapiUsersResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0041_get_user(Tesla.Env.client, String.t, keyword()) :: {:ok, SlurmRESTAPI.Model.V0041OpenapiUsersResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0041_get_user(connection, name, opts \\ []) do
    optional_params = %{
      :with_deleted => :query,
      :with_assocs => :query,
      :with_coords => :query,
      :with_wckeys => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.41/user/#{name}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0041OpenapiUsersResp},
      {:default, SlurmRESTAPI.Model.V0041OpenapiUsersResp}
    ])
  end

  @doc """
  Get user list

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:admin_level` (String.t): Administrator level
    - `:default_account` (String.t): CSV default account list
    - `:default_wckey` (String.t): CSV default wckey list
    - `:with_assocs` (String.t): With associations
    - `:with_coords` (String.t): With coordinators
    - `:with_deleted` (String.t): With deleted
    - `:with_wckeys` (String.t): With wckeys
    - `:without_defaults` (String.t): Exclude defaults

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0041OpenapiUsersResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0041_get_users(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0041OpenapiUsersResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0041_get_users(connection, opts \\ []) do
    optional_params = %{
      :admin_level => :query,
      :default_account => :query,
      :default_wckey => :query,
      :with_assocs => :query,
      :with_coords => :query,
      :with_deleted => :query,
      :with_wckeys => :query,
      :without_defaults => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.41/users/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0041OpenapiUsersResp},
      {:default, SlurmRESTAPI.Model.V0041OpenapiUsersResp}
    ])
  end

  @doc """
  Get wckey info

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `id` (String.t): wckey id
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0041OpenapiWckeyResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0041_get_wckey(Tesla.Env.client, String.t, keyword()) :: {:ok, SlurmRESTAPI.Model.V0041OpenapiWckeyResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0041_get_wckey(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.41/wckey/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0041OpenapiWckeyResp},
      {:default, SlurmRESTAPI.Model.V0041OpenapiWckeyResp}
    ])
  end

  @doc """
  Get wckey list

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:cluster` (String.t): CSV cluster name list
    - `:format` (String.t): Ignored; process JSON manually to control output format
    - `:id` (String.t): CSV id list
    - `:name` (String.t): CSV name list
    - `:only_defaults` (String.t): Only query defaults
    - `:usage_end` (String.t): Usage end (UNIX timestamp)
    - `:usage_start` (String.t): Usage start (UNIX timestamp)
    - `:user` (String.t): CSV user list
    - `:with_usage` (String.t): Include usage
    - `:with_deleted` (String.t): Include deleted wckeys

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0041OpenapiWckeyResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0041_get_wckeys(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0041OpenapiWckeyResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0041_get_wckeys(connection, opts \\ []) do
    optional_params = %{
      :cluster => :query,
      :format => :query,
      :id => :query,
      :name => :query,
      :only_defaults => :query,
      :usage_end => :query,
      :usage_start => :query,
      :user => :query,
      :with_usage => :query,
      :with_deleted => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.41/wckeys/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0041OpenapiWckeyResp},
      {:default, SlurmRESTAPI.Model.V0041OpenapiWckeyResp}
    ])
  end

  @doc """
  Add/update list of accounts

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` (V0041OpenapiAccountsResp): Description of accounts to update/create

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0041OpenapiResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0041_post_accounts(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0041OpenapiResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0041_post_accounts(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/slurmdb/v0.0.41/accounts/")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0041OpenapiResp},
      {:default, SlurmRESTAPI.Model.V0041OpenapiResp}
    ])
  end

  @doc """
  Add accounts with conditional association

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` (V0041OpenapiAccountsAddCondResp): Add list of accounts with conditional association

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0041OpenapiAccountsAddCondRespStr.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0041_post_accounts_association(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0041OpenapiAccountsAddCondRespStr.t} | {:error, Tesla.Env.t}
  def slurmdb_v0041_post_accounts_association(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/slurmdb/v0.0.41/accounts_association/")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0041OpenapiAccountsAddCondRespStr},
      {:default, SlurmRESTAPI.Model.V0041OpenapiAccountsAddCondRespStr}
    ])
  end

  @doc """
  Set associations info

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` (V0041OpenapiAssocsResp): Job description

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0041OpenapiResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0041_post_associations(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0041OpenapiResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0041_post_associations(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/slurmdb/v0.0.41/associations/")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0041OpenapiResp},
      {:default, SlurmRESTAPI.Model.V0041OpenapiResp}
    ])
  end

  @doc """
  Get cluster list

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:update_time` (String.t): Filter reservations since update timestamp
    - `:body` (V0041OpenapiClustersResp): Cluster add or update descriptions

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0041OpenapiResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0041_post_clusters(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0041OpenapiResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0041_post_clusters(connection, opts \\ []) do
    optional_params = %{
      :update_time => :query,
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/slurmdb/v0.0.41/clusters/")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0041OpenapiResp},
      {:default, SlurmRESTAPI.Model.V0041OpenapiResp}
    ])
  end

  @doc """
  Load all configuration information

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` (V0041OpenapiSlurmdbdConfigResp): Add or update config

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0041OpenapiResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0041_post_config(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0041OpenapiResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0041_post_config(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/slurmdb/v0.0.41/config")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0041OpenapiResp},
      {:default, SlurmRESTAPI.Model.V0041OpenapiResp}
    ])
  end

  @doc """
  Add or update QOSs

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:description` (String.t): CSV description list
    - `:id` (String.t): CSV QOS id list
    - `:format` (String.t): Ignored; process JSON manually to control output format
    - `:name` (String.t): CSV QOS name list
    - `:preempt_mode` (String.t): PreemptMode used when jobs in this QOS are preempted
    - `:with_deleted` (String.t): Include deleted QOS
    - `:body` (V0041OpenapiSlurmdbdQosResp): Description of QOS to add or update

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0041OpenapiResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0041_post_qos(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0041OpenapiResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0041_post_qos(connection, opts \\ []) do
    optional_params = %{
      :description => :query,
      :id => :query,
      :format => :query,
      :name => :query,
      :preempt_mode => :query,
      :with_deleted => :query,
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/slurmdb/v0.0.41/qos/")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0041OpenapiResp},
      {:default, SlurmRESTAPI.Model.V0041OpenapiResp}
    ])
  end

  @doc """
  Add TRES

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` (V0041OpenapiTresResp): TRES descriptions. Only works in developer mode.

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0041OpenapiResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0041_post_tres(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0041OpenapiResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0041_post_tres(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/slurmdb/v0.0.41/tres/")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0041OpenapiResp},
      {:default, SlurmRESTAPI.Model.V0041OpenapiResp}
    ])
  end

  @doc """
  Update users

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` (V0041OpenapiUsersResp): add or update user

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0041OpenapiResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0041_post_users(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0041OpenapiResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0041_post_users(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/slurmdb/v0.0.41/users/")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0041OpenapiResp},
      {:default, SlurmRESTAPI.Model.V0041OpenapiResp}
    ])
  end

  @doc """
  Add users with conditional association

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:update_time` (String.t): Filter partitions since update timestamp
    - `:flags` (String.t): Query flags
    - `:body` (V0041OpenapiUsersAddCondResp): Create users with conditional association

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0041OpenapiUsersAddCondRespStr.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0041_post_users_association(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0041OpenapiUsersAddCondRespStr.t} | {:error, Tesla.Env.t}
  def slurmdb_v0041_post_users_association(connection, opts \\ []) do
    optional_params = %{
      :update_time => :query,
      :flags => :query,
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/slurmdb/v0.0.41/users_association/")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0041OpenapiUsersAddCondRespStr},
      {:default, SlurmRESTAPI.Model.V0041OpenapiUsersAddCondRespStr}
    ])
  end

  @doc """
  Add or update wckeys

  ### Parameters

  - `connection` (SlurmRESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:cluster` (String.t): CSV cluster name list
    - `:format` (String.t): Ignored; process JSON manually to control output format
    - `:id` (String.t): CSV id list
    - `:name` (String.t): CSV name list
    - `:only_defaults` (String.t): Only query defaults
    - `:usage_end` (String.t): Usage end (UNIX timestamp)
    - `:usage_start` (String.t): Usage start (UNIX timestamp)
    - `:user` (String.t): CSV user list
    - `:with_usage` (String.t): Include usage
    - `:with_deleted` (String.t): Include deleted wckeys
    - `:body` (V0041OpenapiWckeyResp): wckeys description

  ### Returns

  - `{:ok, SlurmRESTAPI.Model.V0041OpenapiResp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdb_v0041_post_wckeys(Tesla.Env.client, keyword()) :: {:ok, SlurmRESTAPI.Model.V0041OpenapiResp.t} | {:error, Tesla.Env.t}
  def slurmdb_v0041_post_wckeys(connection, opts \\ []) do
    optional_params = %{
      :cluster => :query,
      :format => :query,
      :id => :query,
      :name => :query,
      :only_defaults => :query,
      :usage_end => :query,
      :usage_start => :query,
      :user => :query,
      :with_usage => :query,
      :with_deleted => :query,
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/slurmdb/v0.0.41/wckeys/")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SlurmRESTAPI.Model.V0041OpenapiResp},
      {:default, SlurmRESTAPI.Model.V0041OpenapiResp}
    ])
  end
end
