# NOTE: This file is auto generated by OpenAPI Generator 6.6.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule SlurmRestAPI.Api.Slurm do
  @moduledoc """
  API calls for all endpoints tagged `Slurm`.
  """

  alias SlurmRestAPI.Connection
  import SlurmRestAPI.RequestBuilder

  @doc """
  cancel or signal job

  ### Parameters

  - `connection` (SlurmRestAPI.Connection): Connection to server
  - `job_id` (String.t): Slurm Job ID
  - `opts` (keyword): Optional parameters
    - `:signal` (V0037Signal): signal to send to job

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmctld_cancel_job(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def slurmctld_cancel_job(connection, job_id, opts \\ []) do
    optional_params = %{
      :signal => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/slurm/v0.0.37/job/#{job_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {500, false}
    ])
  end

  @doc """
  get diagnostics

  ### Parameters

  - `connection` (SlurmRestAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRestAPI.Model.V0037Diag.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmctld_diag(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, SlurmRestAPI.Model.V0037Diag.t} | {:error, Tesla.Env.t}
  def slurmctld_diag(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/slurm/v0.0.37/diag")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %SlurmRestAPI.Model.V0037Diag{}},
      {:default, false}
    ])
  end

  @doc """
  get job info

  ### Parameters

  - `connection` (SlurmRestAPI.Connection): Connection to server
  - `job_id` (String.t): Slurm JobID
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRestAPI.Model.V0037JobsResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmctld_get_job(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, SlurmRestAPI.Model.V0037JobsResponse.t} | {:error, Tesla.Env.t}
  def slurmctld_get_job(connection, job_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/slurm/v0.0.37/job/#{job_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %SlurmRestAPI.Model.V0037JobsResponse{}},
      {:default, false}
    ])
  end

  @doc """
  get list of jobs

  ### Parameters

  - `connection` (SlurmRestAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:update_time` (integer()): Filter if changed since update_time. Use of this parameter can result in faster replies.

  ### Returns

  - `{:ok, SlurmRestAPI.Model.V0037JobsResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmctld_get_jobs(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, SlurmRestAPI.Model.V0037JobsResponse.t} | {:error, Tesla.Env.t}
  def slurmctld_get_jobs(connection, opts \\ []) do
    optional_params = %{
      :update_time => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/slurm/v0.0.37/jobs")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %SlurmRestAPI.Model.V0037JobsResponse{}},
      {:default, false}
    ])
  end

  @doc """
  get node info

  ### Parameters

  - `connection` (SlurmRestAPI.Connection): Connection to server
  - `node_name` (String.t): Slurm Node Name
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRestAPI.Model.V0037NodesResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmctld_get_node(Tesla.Env.client, String.t, keyword()) :: {:ok, SlurmRestAPI.Model.V0037NodesResponse.t} | {:ok, nil} | {:error, Tesla.Env.t}
  def slurmctld_get_node(connection, node_name, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/slurm/v0.0.37/node/#{node_name}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %SlurmRestAPI.Model.V0037NodesResponse{}},
      {:default, false}
    ])
  end

  @doc """
  get all node info

  ### Parameters

  - `connection` (SlurmRestAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:update_time` (integer()): Filter if changed since update_time. Use of this parameter can result in faster replies.

  ### Returns

  - `{:ok, SlurmRestAPI.Model.V0037NodesResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmctld_get_nodes(Tesla.Env.client, keyword()) :: {:ok, SlurmRestAPI.Model.V0037NodesResponse.t} | {:ok, nil} | {:error, Tesla.Env.t}
  def slurmctld_get_nodes(connection, opts \\ []) do
    optional_params = %{
      :update_time => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/slurm/v0.0.37/nodes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %SlurmRestAPI.Model.V0037NodesResponse{}},
      {:default, false}
    ])
  end

  @doc """
  get partition info

  ### Parameters

  - `connection` (SlurmRestAPI.Connection): Connection to server
  - `partition_name` (String.t): Slurm Partition Name
  - `opts` (keyword): Optional parameters
    - `:update_time` (integer()): Filter if there were no partition changes (not limited to partition in URL endpoint) since update_time.

  ### Returns

  - `{:ok, SlurmRestAPI.Model.V0037PartitionsResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmctld_get_partition(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, SlurmRestAPI.Model.V0037PartitionsResponse.t} | {:error, Tesla.Env.t}
  def slurmctld_get_partition(connection, partition_name, opts \\ []) do
    optional_params = %{
      :update_time => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/slurm/v0.0.37/partition/#{partition_name}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %SlurmRestAPI.Model.V0037PartitionsResponse{}},
      {:default, false}
    ])
  end

  @doc """
  get all partition info

  ### Parameters

  - `connection` (SlurmRestAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:update_time` (integer()): Filter if changed since update_time. Use of this parameter can result in faster replies.

  ### Returns

  - `{:ok, SlurmRestAPI.Model.V0037PartitionsResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmctld_get_partitions(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, SlurmRestAPI.Model.V0037PartitionsResponse.t} | {:error, Tesla.Env.t}
  def slurmctld_get_partitions(connection, opts \\ []) do
    optional_params = %{
      :update_time => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/slurm/v0.0.37/partitions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %SlurmRestAPI.Model.V0037PartitionsResponse{}},
      {:default, false}
    ])
  end

  @doc """
  get reservation info

  ### Parameters

  - `connection` (SlurmRestAPI.Connection): Connection to server
  - `reservation_name` (String.t): Slurm Reservation Name
  - `opts` (keyword): Optional parameters
    - `:update_time` (integer()): Filter if no reservation (not limited to reservation in URL) changed since update_time.

  ### Returns

  - `{:ok, SlurmRestAPI.Model.V0037ReservationsResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmctld_get_reservation(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, SlurmRestAPI.Model.V0037ReservationsResponse.t} | {:error, Tesla.Env.t}
  def slurmctld_get_reservation(connection, reservation_name, opts \\ []) do
    optional_params = %{
      :update_time => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/slurm/v0.0.37/reservation/#{reservation_name}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %SlurmRestAPI.Model.V0037ReservationsResponse{}},
      {:default, false}
    ])
  end

  @doc """
  get all reservation info

  ### Parameters

  - `connection` (SlurmRestAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:update_time` (integer()): Filter if changed since update_time. Use of this parameter can result in faster replies.

  ### Returns

  - `{:ok, SlurmRestAPI.Model.V0037ReservationsResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmctld_get_reservations(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, SlurmRestAPI.Model.V0037ReservationsResponse.t} | {:error, Tesla.Env.t}
  def slurmctld_get_reservations(connection, opts \\ []) do
    optional_params = %{
      :update_time => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/slurm/v0.0.37/reservations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %SlurmRestAPI.Model.V0037ReservationsResponse{}},
      {:default, false}
    ])
  end

  @doc """
  ping test

  ### Parameters

  - `connection` (SlurmRestAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRestAPI.Model.V0037Pings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmctld_ping(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, SlurmRestAPI.Model.V0037Pings.t} | {:error, Tesla.Env.t}
  def slurmctld_ping(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/slurm/v0.0.37/ping")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %SlurmRestAPI.Model.V0037Pings{}},
      {:default, false}
    ])
  end

  @doc """
  submit new job

  ### Parameters

  - `connection` (SlurmRestAPI.Connection): Connection to server
  - `v0037_job_submission` (V0037JobSubmission): submit new job
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRestAPI.Model.V0037JobSubmissionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmctld_submit_job(Tesla.Env.client, SlurmRestAPI.Model.V0037JobSubmission.t, keyword()) :: {:ok, nil} | {:ok, SlurmRestAPI.Model.V0037JobSubmissionResponse.t} | {:error, Tesla.Env.t}
  def slurmctld_submit_job(connection, v0037_job_submission, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/slurm/v0.0.37/job/submit")
      |> add_param(:body, :body, v0037_job_submission)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %SlurmRestAPI.Model.V0037JobSubmissionResponse{}},
      {:default, false}
    ])
  end

  @doc """
  update job

  ### Parameters

  - `connection` (SlurmRestAPI.Connection): Connection to server
  - `job_id` (String.t): Slurm Job ID
  - `v0037_job_properties` (V0037JobProperties): update job
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmctld_update_job(Tesla.Env.client, String.t, SlurmRestAPI.Model.V0037JobProperties.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def slurmctld_update_job(connection, job_id, v0037_job_properties, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/slurm/v0.0.37/job/#{job_id}")
      |> add_param(:body, :body, v0037_job_properties)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {500, false}
    ])
  end

  @doc """
  Add clusters

  ### Parameters

  - `connection` (SlurmRestAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRestAPI.Model.Dbv0037ResponseClusterAdd.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdbd_add_clusters(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, SlurmRestAPI.Model.Dbv0037ResponseClusterAdd.t} | {:error, Tesla.Env.t}
  def slurmdbd_add_clusters(connection, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/slurmdb/v0.0.37/clusters")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %SlurmRestAPI.Model.Dbv0037ResponseClusterAdd{}},
      {:default, false}
    ])
  end

  @doc """
  Add wckeys

  ### Parameters

  - `connection` (SlurmRestAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRestAPI.Model.Dbv0037ResponseWckeyAdd.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdbd_add_wckeys(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, SlurmRestAPI.Model.Dbv0037ResponseWckeyAdd.t} | {:error, Tesla.Env.t}
  def slurmdbd_add_wckeys(connection, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/slurmdb/v0.0.37/wckeys")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %SlurmRestAPI.Model.Dbv0037ResponseWckeyAdd{}},
      {:default, false}
    ])
  end

  @doc """
  Delete account

  ### Parameters

  - `connection` (SlurmRestAPI.Connection): Connection to server
  - `account_name` (String.t): Slurm Account Name
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRestAPI.Model.Dbv0037ResponseAccountDelete.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdbd_delete_account(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, SlurmRestAPI.Model.Dbv0037ResponseAccountDelete.t} | {:error, Tesla.Env.t}
  def slurmdbd_delete_account(connection, account_name, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/slurmdb/v0.0.37/account/#{account_name}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %SlurmRestAPI.Model.Dbv0037ResponseAccountDelete{}},
      {:default, false}
    ])
  end

  @doc """
  Delete association

  ### Parameters

  - `connection` (SlurmRestAPI.Connection): Connection to server
  - `account` (String.t): Account name
  - `user` (String.t): User name
  - `opts` (keyword): Optional parameters
    - `:cluster` (String.t): Cluster name
    - `:partition` (String.t): Partition Name

  ### Returns

  - `{:ok, SlurmRestAPI.Model.Dbv0037ResponseAssociationDelete.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdbd_delete_association(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, SlurmRestAPI.Model.Dbv0037ResponseAssociationDelete.t} | {:error, Tesla.Env.t}
  def slurmdbd_delete_association(connection, account, user, opts \\ []) do
    optional_params = %{
      :cluster => :query,
      :partition => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/slurmdb/v0.0.37/association")
      |> add_param(:query, :account, account)
      |> add_param(:query, :user, user)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %SlurmRestAPI.Model.Dbv0037ResponseAssociationDelete{}},
      {:default, false}
    ])
  end

  @doc """
  Delete cluster

  ### Parameters

  - `connection` (SlurmRestAPI.Connection): Connection to server
  - `cluster_name` (String.t): Slurm cluster name
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRestAPI.Model.Dbv0037ResponseClusterDelete.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdbd_delete_cluster(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, SlurmRestAPI.Model.Dbv0037ResponseClusterDelete.t} | {:error, Tesla.Env.t}
  def slurmdbd_delete_cluster(connection, cluster_name, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/slurmdb/v0.0.37/cluster/#{cluster_name}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %SlurmRestAPI.Model.Dbv0037ResponseClusterDelete{}},
      {:default, false}
    ])
  end

  @doc """
  Delete QOS

  ### Parameters

  - `connection` (SlurmRestAPI.Connection): Connection to server
  - `qos_name` (String.t): Slurm QOS Name
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRestAPI.Model.Dbv0037ResponseQosDelete.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdbd_delete_qos(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, SlurmRestAPI.Model.Dbv0037ResponseQosDelete.t} | {:error, Tesla.Env.t}
  def slurmdbd_delete_qos(connection, qos_name, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/slurmdb/v0.0.37/qos/#{qos_name}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %SlurmRestAPI.Model.Dbv0037ResponseQosDelete{}},
      {:default, false}
    ])
  end

  @doc """
  Delete user

  ### Parameters

  - `connection` (SlurmRestAPI.Connection): Connection to server
  - `user_name` (String.t): Slurm User Name
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRestAPI.Model.Dbv0037ResponseUserDelete.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdbd_delete_user(Tesla.Env.client, String.t, keyword()) :: {:ok, SlurmRestAPI.Model.Dbv0037ResponseUserDelete.t} | {:ok, nil} | {:error, Tesla.Env.t}
  def slurmdbd_delete_user(connection, user_name, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/slurmdb/v0.0.37/user/#{user_name}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %SlurmRestAPI.Model.Dbv0037ResponseUserDelete{}},
      {:default, false}
    ])
  end

  @doc """
  Delete wckey

  ### Parameters

  - `connection` (SlurmRestAPI.Connection): Connection to server
  - `wckey` (String.t): Slurm wckey name
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRestAPI.Model.Dbv0037ResponseWckeyDelete.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdbd_delete_wckey(Tesla.Env.client, String.t, keyword()) :: {:ok, SlurmRestAPI.Model.Dbv0037ResponseWckeyDelete.t} | {:ok, nil} | {:error, Tesla.Env.t}
  def slurmdbd_delete_wckey(connection, wckey, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/slurmdb/v0.0.37/wckey/#{wckey}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %SlurmRestAPI.Model.Dbv0037ResponseWckeyDelete{}},
      {:default, false}
    ])
  end

  @doc """
  Get slurmdb diagnostics

  ### Parameters

  - `connection` (SlurmRestAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRestAPI.Model.Dbv0037Diag.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdbd_diag(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, SlurmRestAPI.Model.Dbv0037Diag.t} | {:error, Tesla.Env.t}
  def slurmdbd_diag(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.37/diag")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %SlurmRestAPI.Model.Dbv0037Diag{}},
      {:default, false}
    ])
  end

  @doc """
  Get account info

  ### Parameters

  - `connection` (SlurmRestAPI.Connection): Connection to server
  - `account_name` (String.t): Slurm Account Name
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRestAPI.Model.Dbv0037AccountInfo.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdbd_get_account(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, SlurmRestAPI.Model.Dbv0037AccountInfo.t} | {:error, Tesla.Env.t}
  def slurmdbd_get_account(connection, account_name, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.37/account/#{account_name}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %SlurmRestAPI.Model.Dbv0037AccountInfo{}},
      {:default, false}
    ])
  end

  @doc """
  Get account list

  ### Parameters

  - `connection` (SlurmRestAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRestAPI.Model.Dbv0037AccountInfo.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdbd_get_accounts(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, SlurmRestAPI.Model.Dbv0037AccountInfo.t} | {:error, Tesla.Env.t}
  def slurmdbd_get_accounts(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.37/accounts")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %SlurmRestAPI.Model.Dbv0037AccountInfo{}},
      {:default, false}
    ])
  end

  @doc """
  Get association info

  ### Parameters

  - `connection` (SlurmRestAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:cluster` (String.t): Cluster name
    - `:account` (String.t): Account name
    - `:user` (String.t): User name
    - `:partition` (String.t): Partition Name

  ### Returns

  - `{:ok, SlurmRestAPI.Model.Dbv0037AssociationsInfo.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdbd_get_association(Tesla.Env.client, keyword()) :: {:ok, SlurmRestAPI.Model.Dbv0037AssociationsInfo.t} | {:ok, nil} | {:error, Tesla.Env.t}
  def slurmdbd_get_association(connection, opts \\ []) do
    optional_params = %{
      :cluster => :query,
      :account => :query,
      :user => :query,
      :partition => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.37/association")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %SlurmRestAPI.Model.Dbv0037AssociationsInfo{}},
      {:default, false}
    ])
  end

  @doc """
  Get association list

  ### Parameters

  - `connection` (SlurmRestAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRestAPI.Model.Dbv0037AssociationsInfo.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdbd_get_associations(Tesla.Env.client, keyword()) :: {:ok, SlurmRestAPI.Model.Dbv0037AssociationsInfo.t} | {:ok, nil} | {:error, Tesla.Env.t}
  def slurmdbd_get_associations(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.37/associations")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %SlurmRestAPI.Model.Dbv0037AssociationsInfo{}},
      {:default, false}
    ])
  end

  @doc """
  Get cluster info

  ### Parameters

  - `connection` (SlurmRestAPI.Connection): Connection to server
  - `cluster_name` (String.t): Slurm cluster name
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRestAPI.Model.Dbv0037ClusterInfo.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdbd_get_cluster(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, SlurmRestAPI.Model.Dbv0037ClusterInfo.t} | {:error, Tesla.Env.t}
  def slurmdbd_get_cluster(connection, cluster_name, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.37/cluster/#{cluster_name}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %SlurmRestAPI.Model.Dbv0037ClusterInfo{}},
      {:default, false}
    ])
  end

  @doc """
  Get cluster list

  ### Parameters

  - `connection` (SlurmRestAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRestAPI.Model.Dbv0037ClusterInfo.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdbd_get_clusters(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, SlurmRestAPI.Model.Dbv0037ClusterInfo.t} | {:error, Tesla.Env.t}
  def slurmdbd_get_clusters(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.37/clusters")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %SlurmRestAPI.Model.Dbv0037ClusterInfo{}},
      {:default, false}
    ])
  end

  @doc """
  Dump all configuration information

  ### Parameters

  - `connection` (SlurmRestAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRestAPI.Model.Dbv0037ConfigInfo.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdbd_get_db_config(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, SlurmRestAPI.Model.Dbv0037ConfigInfo.t} | {:error, Tesla.Env.t}
  def slurmdbd_get_db_config(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.37/config")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %SlurmRestAPI.Model.Dbv0037ConfigInfo{}},
      {:default, false}
    ])
  end

  @doc """
  Get job info
  This endpoint may return multiple job entries since job_id is not a unique key - only the tuple (cluster, job_id, start_time) is unique. If the requested job_id is a component of a heterogeneous job all components are returned.

  ### Parameters

  - `connection` (SlurmRestAPI.Connection): Connection to server
  - `job_id` (integer()): Slurm Job ID
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRestAPI.Model.Dbv0037JobInfo.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdbd_get_job(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, SlurmRestAPI.Model.Dbv0037JobInfo.t} | {:error, Tesla.Env.t}
  def slurmdbd_get_job(connection, job_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.37/job/#{job_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %SlurmRestAPI.Model.Dbv0037JobInfo{}},
      {:default, false}
    ])
  end

  @doc """
  Get job list

  ### Parameters

  - `connection` (SlurmRestAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:submit_time` (String.t): Filter by submission time  Accepted formats:  HH:MM[:SS] [AM|PM]  MMDD[YY] or MM/DD[/YY] or MM.DD[.YY]  MM/DD[/YY]-HH:MM[:SS]  YYYY-MM-DD[THH:MM[:SS]]
    - `:start_time` (String.t): Filter by start time  Accepted formats:  HH:MM[:SS] [AM|PM]  MMDD[YY] or MM/DD[/YY] or MM.DD[.YY]  MM/DD[/YY]-HH:MM[:SS]  YYYY-MM-DD[THH:MM[:SS]]
    - `:end_time` (String.t): Filter by end time  Accepted formats:  HH:MM[:SS] [AM|PM]  MMDD[YY] or MM/DD[/YY] or MM.DD[.YY]  MM/DD[/YY]-HH:MM[:SS]  YYYY-MM-DD[THH:MM[:SS]]
    - `:account` (String.t): Comma delimited list of accounts to match
    - `:association` (String.t): Comma delimited list of associations to match
    - `:cluster` (String.t): Comma delimited list of cluster to match
    - `:constraints` (String.t): Comma delimited list of constraints to match
    - `:cpus_max` (String.t): Number of CPUs high range
    - `:cpus_min` (String.t): Number of CPUs low range
    - `:skip_steps` (boolean()): Report job step information
    - `:disable_wait_for_result` (boolean()): Disable waiting for result from slurmdbd
    - `:exit_code` (String.t): Exit code of job
    - `:format` (String.t): Comma delimited list of formats to match
    - `:group` (String.t): Comma delimited list of groups to match
    - `:job_name` (String.t): Comma delimited list of job names to match
    - `:nodes_max` (String.t): Number of nodes high range
    - `:nodes_min` (String.t): Number of nodes low range
    - `:partition` (String.t): Comma delimited list of partitions to match
    - `:qos` (String.t): Comma delimited list of QOS to match
    - `:reason` (String.t): Comma delimited list of job reasons to match
    - `:reservation` (String.t): Comma delimited list of reservations to match
    - `:state` (String.t): Comma delimited list of states to match
    - `:step` (String.t): Comma delimited list of job steps to match
    - `:node` (String.t): Comma delimited list of used nodes to match
    - `:wckey` (String.t): Comma delimited list of wckeys to match

  ### Returns

  - `{:ok, SlurmRestAPI.Model.Dbv0037JobInfo.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdbd_get_jobs(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, SlurmRestAPI.Model.Dbv0037JobInfo.t} | {:error, Tesla.Env.t}
  def slurmdbd_get_jobs(connection, opts \\ []) do
    optional_params = %{
      :submit_time => :query,
      :start_time => :query,
      :end_time => :query,
      :account => :query,
      :association => :query,
      :cluster => :query,
      :constraints => :query,
      :cpus_max => :query,
      :cpus_min => :query,
      :skip_steps => :query,
      :disable_wait_for_result => :query,
      :exit_code => :query,
      :format => :query,
      :group => :query,
      :job_name => :query,
      :nodes_max => :query,
      :nodes_min => :query,
      :partition => :query,
      :qos => :query,
      :reason => :query,
      :reservation => :query,
      :state => :query,
      :step => :query,
      :node => :query,
      :wckey => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.37/jobs")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %SlurmRestAPI.Model.Dbv0037JobInfo{}},
      {:default, false}
    ])
  end

  @doc """
  Get QOS list

  ### Parameters

  - `connection` (SlurmRestAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRestAPI.Model.Dbv0037QosInfo.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdbd_get_qos(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, SlurmRestAPI.Model.Dbv0037QosInfo.t} | {:error, Tesla.Env.t}
  def slurmdbd_get_qos(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.37/qos")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %SlurmRestAPI.Model.Dbv0037QosInfo{}},
      {:default, false}
    ])
  end

  @doc """
  Get QOS info

  ### Parameters

  - `connection` (SlurmRestAPI.Connection): Connection to server
  - `qos_name` (String.t): Slurm QOS Name
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRestAPI.Model.Dbv0037QosInfo.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdbd_get_single_qos(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, SlurmRestAPI.Model.Dbv0037QosInfo.t} | {:error, Tesla.Env.t}
  def slurmdbd_get_single_qos(connection, qos_name, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.37/qos/#{qos_name}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %SlurmRestAPI.Model.Dbv0037QosInfo{}},
      {:default, false}
    ])
  end

  @doc """
  Get TRES info

  ### Parameters

  - `connection` (SlurmRestAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRestAPI.Model.Dbv0037TresInfo.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdbd_get_tres(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, SlurmRestAPI.Model.Dbv0037TresInfo.t} | {:error, Tesla.Env.t}
  def slurmdbd_get_tres(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.37/tres")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %SlurmRestAPI.Model.Dbv0037TresInfo{}},
      {:default, false}
    ])
  end

  @doc """
  Get user info

  ### Parameters

  - `connection` (SlurmRestAPI.Connection): Connection to server
  - `user_name` (String.t): Slurm User Name
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRestAPI.Model.Dbv0037UserInfo.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdbd_get_user(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, SlurmRestAPI.Model.Dbv0037UserInfo.t} | {:error, Tesla.Env.t}
  def slurmdbd_get_user(connection, user_name, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.37/user/#{user_name}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %SlurmRestAPI.Model.Dbv0037UserInfo{}},
      {:default, false}
    ])
  end

  @doc """
  Get user list

  ### Parameters

  - `connection` (SlurmRestAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRestAPI.Model.Dbv0037UserInfo.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdbd_get_users(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, SlurmRestAPI.Model.Dbv0037UserInfo.t} | {:error, Tesla.Env.t}
  def slurmdbd_get_users(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.37/users")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %SlurmRestAPI.Model.Dbv0037UserInfo{}},
      {:default, false}
    ])
  end

  @doc """
  Get wckey info

  ### Parameters

  - `connection` (SlurmRestAPI.Connection): Connection to server
  - `wckey` (String.t): Slurm wckey name
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRestAPI.Model.Dbv0037WckeyInfo.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdbd_get_wckey(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, SlurmRestAPI.Model.Dbv0037WckeyInfo.t} | {:error, Tesla.Env.t}
  def slurmdbd_get_wckey(connection, wckey, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.37/wckey/#{wckey}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %SlurmRestAPI.Model.Dbv0037WckeyInfo{}},
      {:default, false}
    ])
  end

  @doc """
  Get wckey list

  ### Parameters

  - `connection` (SlurmRestAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRestAPI.Model.Dbv0037WckeyInfo.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdbd_get_wckeys(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, SlurmRestAPI.Model.Dbv0037WckeyInfo.t} | {:error, Tesla.Env.t}
  def slurmdbd_get_wckeys(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/slurmdb/v0.0.37/wckeys")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %SlurmRestAPI.Model.Dbv0037WckeyInfo{}},
      {:default, false}
    ])
  end

  @doc """
  Load all configuration information

  ### Parameters

  - `connection` (SlurmRestAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRestAPI.Model.Dbv0037ConfigResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdbd_set_db_config(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, SlurmRestAPI.Model.Dbv0037ConfigResponse.t} | {:error, Tesla.Env.t}
  def slurmdbd_set_db_config(connection, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/slurmdb/v0.0.37/config")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %SlurmRestAPI.Model.Dbv0037ConfigResponse{}},
      {:default, false}
    ])
  end

  @doc """
  Update accounts

  ### Parameters

  - `connection` (SlurmRestAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRestAPI.Model.Dbv0037AccountResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdbd_update_account(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, SlurmRestAPI.Model.Dbv0037AccountResponse.t} | {:error, Tesla.Env.t}
  def slurmdbd_update_account(connection, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/slurmdb/v0.0.37/accounts")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %SlurmRestAPI.Model.Dbv0037AccountResponse{}},
      {:default, false}
    ])
  end

  @doc """
  Set associations info

  ### Parameters

  - `connection` (SlurmRestAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRestAPI.Model.Dbv0037ResponseAssociations.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdbd_update_associations(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, SlurmRestAPI.Model.Dbv0037ResponseAssociations.t} | {:error, Tesla.Env.t}
  def slurmdbd_update_associations(connection, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/slurmdb/v0.0.37/associations")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %SlurmRestAPI.Model.Dbv0037ResponseAssociations{}},
      {:default, false}
    ])
  end

  @doc """
  Set TRES info

  ### Parameters

  - `connection` (SlurmRestAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRestAPI.Model.Dbv0037ResponseTres.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdbd_update_tres(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, SlurmRestAPI.Model.Dbv0037ResponseTres.t} | {:error, Tesla.Env.t}
  def slurmdbd_update_tres(connection, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/slurmdb/v0.0.37/tres")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %SlurmRestAPI.Model.Dbv0037ResponseTres{}},
      {:default, false}
    ])
  end

  @doc """
  Update user

  ### Parameters

  - `connection` (SlurmRestAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SlurmRestAPI.Model.Dbv0037ResponseUserUpdate.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec slurmdbd_update_users(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, SlurmRestAPI.Model.Dbv0037ResponseUserUpdate.t} | {:error, Tesla.Env.t}
  def slurmdbd_update_users(connection, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/slurmdb/v0.0.37/users")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %SlurmRestAPI.Model.Dbv0037ResponseUserUpdate{}},
      {:default, false}
    ])
  end
end
